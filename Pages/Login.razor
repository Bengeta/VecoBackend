@page "/Login"
@using VecoBackend.Enums
@using VecoBackend.Authentication



<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>Email</label>
            <input @bind="model.Email" class="form-control" placeholder="Email"/>
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {

    public class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        try
        {
            var tokenResponse = await userService.Login(model.Email, model.Password);
            if (tokenResponse.ResultCode != ResultCode.Success)
            {
                await jsRuntime.InvokeVoidAsync("alert", "Invalid email or password");
                return;
            }
            var user = await userService.GetUser(tokenResponse.Data);
            if(!user.Data.isAdmin)
                return;
            var customAuthStateProvider = (CustomAuthenticationStateProvider) AuthenticationStateProvider;
            await customAuthStateProvider.UpdateAutheticationSession(
                new UserSession
                {
                    UserName = user.Data.name,
                    Token = tokenResponse.Data,
                    Role = user.Data.isAdmin ? "Admin" : "User"
                });
            await customAuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/Materials", true);
        }

        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }


}