@page "/Material/{id:int}"
@using VecoBackend.Enums

<h3>Material</h3>

@if (State != null && State.Identity.Name != "Anonymous")
{
@if (MaterialResponse == null)
{
    <tr>Loading Data ...</tr>
}
else
{
    <label for="fname">Автор:</label>
    <input type="text" @bind="@MaterialResponse.Author" @bind:event="oninput" placeholder="@MaterialResponse.Author" id="fname" name="fname"><br><br>
    <label for="lname">Заголовок:</label>
    <input type="text" @bind="@MaterialResponse.Title" @bind:event="oninput" placeholder="@MaterialResponse.Title" id="lname" name="lname"><br><br>
    <label for="lname">Дата Создания:</label>
    <input type="Date" @bind="@MaterialResponse.Date" @bind:event="oninput" placeholder="@MaterialResponse.Date" id="lname" name="lname"><br><br>
    <label for="lname">Текст:</label>
    <textarea rows="30" cols="100" @bind="@MaterialResponse.Description" @bind:event="oninput"  placeholder=@MaterialResponse.Description></textarea><br><br>
    <label for="lname">Категория:</label>
    <input type="text" @bind="@MaterialResponse.Category" @bind:event="oninput" placeholder="@MaterialResponse.Category" id="lname" name="lname"><br><br>

    <br/>
    <label for="fname">Фотографии:</label>
    <InputFile multiple OnChange="UploadImage" class="form-control"/>
    @if (id == -1)
    {
        <button type="submit" class="btn btn-primary" @onclick="CreateMaterial">Сохранить</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary" @onclick="UpdateMaterial">Изменить</button>
        <br/>
        <button type="submit" class="btn btn-danger" @onclick="DeleteMaterial">Удалить</button>
    }

    }
    }



    @code {

        [Parameter]
        public int id { get; set; }

        private List<int> _images;
        private MaterialResponse MaterialResponse { get; set; }
        private ClaimsPrincipal State { get; set; }
        private bool isPictureChanged = false;

        protected override async Task OnInitializedAsync()
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (!state.User.Identity.IsAuthenticated)
                return;
            State = state.User;

            MaterialResponse = new MaterialResponse();
            _images = new List<int>();
            var material = await materialService.GetMaterial(id, hostingEnvironment.WebRootPath);
            if (material != null)
                MaterialResponse = material;
            else
                MaterialResponse.Id = -1;
        }

        private async Task UpdateMaterial()
        {
            if (await materialService.UpdateMaterial(MakeMaterialUpdateRequest(MaterialResponse),isPictureChanged))
            {
                await jsRuntime.InvokeVoidAsync("alert", "Материал успешно изменен");
                NavigationManager.NavigateTo("/Materials");
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Ошибка изменения материала");
            }
        }

        private async Task CreateMaterial()
        {
            if (await materialService.CreateMaterial(MakeMaterialCreateRequest(MaterialResponse)))
            {
                await jsRuntime.InvokeVoidAsync("alert", "Материал успешно создан");
                NavigationManager.NavigateTo("/Materials");
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Ошибка при создании материала");
            }
        }

        private async Task DeleteMaterial()
        {
            if (await materialService.DeleteMaterial(id))
            {
                await jsRuntime.InvokeVoidAsync("alert", "Материал успешно удален");
                NavigationManager.NavigateTo("/Materials");
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Ошибка удаления материала");
            }
        }

        private MaterialCreateRequest MakeMaterialCreateRequest(MaterialResponse materialResponse)
        {
            var materialCreateRequest = new MaterialCreateRequest();
            DateTime start = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            materialCreateRequest.Date = start.AddMilliseconds(materialResponse.Date).ToLocalTime();
            materialCreateRequest.Author = materialResponse.Author;
            materialCreateRequest.Title = materialResponse.Title;
            materialCreateRequest.Description = materialResponse.Description;
            materialCreateRequest.Category = materialResponse.Category;
            materialCreateRequest.Images = _images;
            return materialCreateRequest;
        }

        private MaterialUpdateRequest MakeMaterialUpdateRequest(MaterialResponse materialResponse)
        {
            var materialCreateRequest = new MaterialUpdateRequest();
            DateTime start = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            materialCreateRequest.Id = id;
            materialCreateRequest.Date = start.AddMilliseconds(materialResponse.Date).ToLocalTime();
            materialCreateRequest.Author = materialResponse.Author;
            materialCreateRequest.Title = materialResponse.Title;
            materialCreateRequest.Description = materialResponse.Description;
            materialCreateRequest.Category = materialResponse.Category;
            materialCreateRequest.Images = _images;
            return materialCreateRequest;
        }

        private async Task UploadImage(InputFileChangeEventArgs e)
        {
            var files = e.GetMultipleFiles();
            isPictureChanged = true;
            var token = State.Identities.First().Claims.ToList()[1].Value;
            await _imageService.DeleteImageMaterials(token);
            _images.Clear();
            foreach (var file in files)
            {
                var res = await _imageService.SaveImage(file, SaveImageType.Box, token);
                if (res.ResultCode == ResultCode.Success)
                    _images.Add(res.Data);
            }
        }

    }

    