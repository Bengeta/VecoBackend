@page "/Materials"
<h3>Materials</h3>
<head>
    <style>
    button {
      text-decoration: none;
      display: inline-block;
      padding: 8px 16px;
    }
    
    button:hover {
      background-color: #ddd;
      color: black;
    }
    
    .previous {
      background-color: #f1f1f1;
      color: black;
    }
    
    .next {
      background-color: #04AA6D;
      color: white;
    }
    
    .round {
      border-radius: 50%;
    }
    </style>
</head>

<body>
@if (State!=null && State.Identity.Name!="Anonymous")
{
    <div class="table-responsible">
        <table class="table table-stripped">
            <thead class="thead-light">
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>CreateOn</th>
            </tr>
            </thead>
            <tbody>
            @if (MaterListResponses == null)
            {
                <tr>Loading Data ...</tr>
            }
            else
            {
                @foreach (var material in MaterListResponses.data)
                {
                    <tr @onclick="() => OpenMaterial(material.Id)">
                        <td>
                            @material.Title
                        </td>
                        <td>
                            @material.Author
                        </td>
                        <td>
                            @material.Date
                        </td>
                    </tr>
                }
            }
            </tbody>
            <button class="previous round" @onclick="PreviousPage">&#8249;</button>
            <button class="next round" @onclick="NextPage">&#8250;</button>
        </table>

        <button class="btn btn-info" @onclick="AddMaterial">Добавить Материал</button>
    </div>
   
}
 </body>

@code {
    private PaginatedListModel<MaterialResponse> MaterListResponses { get; set; }
    private ClaimsPrincipal State { get; set; }
    private int Page { get; set; } = 0;
    private int PageSize { get; set; } = 5;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!state.User.Identity.IsAuthenticated)
            return;
        State = state.User;

        MaterListResponses = await materialService.GetMaterials(Page, PageSize, hostingEnvironment.WebRootPath);
    }

    protected void OpenMaterial(int materialId)
    {
        NavigationManager.NavigateTo($"/Material/{materialId}");
    }

    protected async Task NextPage()
    {
        if (!MaterListResponses.isNext)
            return;
        Page++;
        MaterListResponses = await materialService.GetMaterials(Page, PageSize, hostingEnvironment.WebRootPath);
    }

    protected async Task PreviousPage()
    {
        if (!MaterListResponses.isPrev)
            return;
        Page--;
        MaterListResponses = await materialService.GetMaterials(Page, PageSize, hostingEnvironment.WebRootPath);
    }

    protected void AddMaterial()
    {
        NavigationManager.NavigateTo($"/Material/{-1}");
    }

}