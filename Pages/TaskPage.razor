@page "/Task/{id:int}"
<h3>TaskPage</h3>

@if (State != null && State.Identity.Name != "Anonymous")
{
@if (task == null && id != -1)
{
    <tr>Loading Data ...</tr>
}
else
{
    <label for="fname">Заголовок:</label>
    <input type="text" rows="100" @bind="@task.Title" @bind:event="oninput" placeholder="@task.Title" id="fname" name="fname"><br><br>
    <label for="lname">Очки:</label>
    <input type="text" @bind="@task.Points" @bind:event="oninput" placeholder="@task.Points" id="lname" name="lname"><br><br>
    <label for="lname">Дедлайн:</label>
    <input type="datetime-local" @bind="@deadline" @bind:event="oninput" placeholder="@deadline" id="lname" name="lname"><br><br>
    <label for="lname">Описание:</label>
    <textarea rows="30" cols="100" @bind="@task.Description" @bind:event="oninput"  placeholder=@task.Description></textarea><br><br>
    <label for="lname">Сделать видимым пользователям:</label>
    @task.IsSeen
    <label for="lname">Тип Задания:</label>
    <select @bind="@task.Type" @bind:event="oninput">
        @foreach (var category in Types)
        {
            <option value="@category">@category</option>
        }
    </select><br><br>
    
    @if (task.IsSeen)
    {
        <button type="submit" class="btn btn-danger" @onclick="ChangeTaskVisibility">Скрыть задание</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary" @onclick="ChangeTaskVisibility">Показать задание</button>
    }<br><br>

    @if (id == -1)
    {
        <button type="submit" class="btn btn-primary" @onclick="CreateMaterial">Сохранить</button>
    }
    else
    {
        <button type="submit" class="btn btn-primary" @onclick="UpdateMaterial">Изменить</button>
        <br/>
        <button type="submit" class="btn btn-danger" @onclick="DeleteMaterial">Удалить</button>
    }
    }}


    @code {

        [Parameter]
        public int id { get; set; }

        private GetTaskResponse task = new GetTaskResponse();
        private ClaimsPrincipal State { get; set; }
        private DateTime deadline { get; set; }
        private List<TaskType> Types { get; set; }

        protected override async Task OnInitializedAsync()
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (!state.User.Identity.IsAuthenticated)
                return;
            State = state.User;

            Types = Enum.GetValues(typeof(TaskType)).Cast<TaskType>().ToList();
            var task_ = await taskService.GetTaskById(id);
            if (task_ != null)
            {
                task = task_;
                deadline = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(task_.Deadline).ToLocalTime();
            }
        }

        private async Task UpdateMaterial()
        {
            if (await taskService.UpdateTask(MakeChangeTaskResponse(task)))
            {
                await jsRuntime.InvokeVoidAsync("alert", "Задание успешно изменено");
                NavigationManager.NavigateTo("/veco/TaskList");
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Ошибка изменения задания");
            }
        }

        private async Task CreateMaterial()
        {
            if (await taskService.CreateTask(MakeAddTaskResponse(task)))
            {
                await jsRuntime.InvokeVoidAsync("alert", "Задание успешно создано");
                NavigationManager.NavigateTo("/veco/TaskList");
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Ошибка при создании Задания");
            }
        }

        private async Task DeleteMaterial()
        {
            if (await taskService.DeleteTask(id))
            {
                await jsRuntime.InvokeVoidAsync("alert", "Задание успешно удалено");
                NavigationManager.NavigateTo("/veco/TaskList");
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("alert", "Ошибка удаления материала");
            }
        }

        private AddTaskResponse MakeAddTaskResponse(GetTaskResponse taskResponse)
        {
            var addTaskResponse = new AddTaskResponse();
            addTaskResponse.Deadline = deadline;
            addTaskResponse.Status = taskResponse.Status;
            addTaskResponse.Type = taskResponse.Type;
            addTaskResponse.Title = taskResponse.Title;
            addTaskResponse.Description = taskResponse.Description;
            addTaskResponse.Points = taskResponse.Points;
            return addTaskResponse;
        }

        private ChangeTaskResponse MakeChangeTaskResponse(GetTaskResponse taskResponse)
        {
            var changeTaskResponse = new ChangeTaskResponse();
            changeTaskResponse.Deadline = deadline;
            changeTaskResponse.Status = taskResponse.Status;
            changeTaskResponse.Id = taskResponse.Id;
            changeTaskResponse.Type = taskResponse.Type;
            changeTaskResponse.Title = taskResponse.Title;
            changeTaskResponse.Description = taskResponse.Description;
            changeTaskResponse.Points = taskResponse.Points;
            return changeTaskResponse;
        }
        private DateTime AddDeadline(TaskType type)
        {
            switch (type)
            {
                case TaskType.Day:
                    return DateTime.Now.AddDays(1);
                case TaskType.Week:
                    return DateTime.Now.AddDays(7);
                case TaskType.Month:
                    return DateTime.Now.AddMonths(1);
                default:
                    return DateTime.Now;
            }
        }
        private async Task ChangeTaskVisibility()
        {
            if(await taskService.ChangeTaskVisibility(task.Id, !task.IsSeen))
            {
                task.IsSeen = !task.IsSeen;
                await jsRuntime.InvokeVoidAsync("alert", "Задание успешно изменено");
                return;
            }
            await jsRuntime.InvokeVoidAsync("alert", "Ошибка изменения задания");
        }

    }

